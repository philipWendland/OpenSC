/*
 * Support for the IsoApplet JavaCard Applet, common features.
 *
 * Copyright (C) 2020 Philip Wendland <philip@wendland.xyz>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef CARD_ISOAPPLET_COMMON_H_
#define CARD_ISOAPPLET_COMMON_H_

#include <stdlib.h>

#include "types.h"

struct isoapplet_drv_data
{
	/* Save the current algorithm reference
	 * (ISOAPPLET_ALG_REF_ECDSA, ISOAPPLET_ALG_REF_RSA_PAD_PKCS1)
	 * to be able to distinguish between RSA and ECC operations.
	 * If ECC is being used, the signatures generated by the card
	 * have to be modified. */
	unsigned int sec_env_alg_ref;
	unsigned int sec_env_ec_field_length;
	unsigned int isoapplet_version;
};
#define ISOAPPLET_DRVDATA(card)	((struct isoapplet_drv_data *) ((card)->drv_data))

struct isoapplet_supported_ec_curves {
	struct sc_object_id oid;
	size_t size;
	unsigned int min_applet_version;
};

int isoapplet_finish(sc_card_t *card);

u8 isoapplet_acl_to_security_condition_byte(const sc_acl_entry_t *entry);

int isoapplet_create_file(sc_card_t *card, sc_file_t *file);

int isoapplet_add_sa_to_acl(sc_file_t *file, unsigned int operation, u8 saByte);

int isoapplet_process_fci(sc_card_t *card, sc_file_t *file,	const u8 *buf, size_t buflen);

int isoapplet_put_ec_params(sc_card_t *card, sc_cardctl_isoapplet_ec_parameters_t *params, u8 *out, size_t out_len, u8 **ptr);

int isoapplet_ctl_generate_key(sc_card_t *card, sc_cardctl_isoapplet_genkey_t *args);

int isoapplet_put_data_prkey_rsa(sc_card_t *card, sc_cardctl_isoapplet_import_key_t *args);

int isoapplet_put_data_prkey_ec(sc_card_t *card, sc_cardctl_isoapplet_import_key_t *args);

int isoapplet_ctl_import_key(sc_card_t *card, sc_cardctl_isoapplet_import_key_t *args);

int isoapplet_card_ctl(sc_card_t *card, unsigned long cmd, void *ptr);

int isoapplet_set_security_env(sc_card_t *card, const sc_security_env_t *env, int se_num);

int isoapplet_compute_signature(struct sc_card *card, const u8 *data, size_t datalen, u8 *out, size_t outlen);

int isoapplet_get_challenge(struct sc_card *card, u8 *rnd, size_t len);

int isoapplet_card_reader_lock_obtained(sc_card_t *card, int was_reset);

#endif /* CARD_ISOAPPLET_COMMON_H_ */
